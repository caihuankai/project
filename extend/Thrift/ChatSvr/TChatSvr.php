<?php
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


interface TChatSvrIf {
  /**
   * @param int $groupid
   * @param \TChatMsg $chatMsg
   * @param \TChatMsgExtra $extra
   * @return bool
   */
  public function procGroupChatReq($groupid, \TChatMsg $chatMsg, \TChatMsgExtra $extra);
  /**
   * @param int $userid
   * @param int $groupid
   * @param int $roletype
   * @return bool
   */
  public function procUserJoinGroupNotify($userid, $groupid, $roletype);
  /**
   * @param \TGroupAssistMsg $assistMsg
   * @param bool $bNotyAdmin
   * @param bool $bNotyUser
   * @return int
   */
  public function proc_addGroupAssistMsg(\TGroupAssistMsg $assistMsg, $bNotyAdmin, $bNotyUser);
  /**
   * @param int $handle_userid
   * @param int $groupid
   * @param int $msgid
   * @param bool $agree
   * @param int $apply_userid
   * @return bool
   */
  public function handle_approveGroupAssistMsg($handle_userid, $groupid, $msgid, $agree, $apply_userid);
  /**
   * @param string $inputkey
   * @param int $code
   * @param string $key
   * @return bool
   */
  public function handle_voice_callback($inputkey, $code, $key);
  /**
   * @param int $action
   * @param string $value
   * @param string $replace
   * @return bool
   */
  public function handle_keyword_action($action, $value, $replace);
  /**
   * @param \TPPTPicInfo[] $vecPicId
   * @param int $optType
   * @return bool
   */
  public function proc_optPPTPic(array $vecPicId, $optType);
  /**
   * @param \TChatAuditMsg $tTChatMsg
   * @return bool
   */
  public function proc_commentAudit(\TChatAuditMsg $tTChatMsg);
}

class TChatSvrClient implements \TChatSvrIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function procGroupChatReq($groupid, \TChatMsg $chatMsg, \TChatMsgExtra $extra)
  {
    $this->send_procGroupChatReq($groupid, $chatMsg, $extra);
    return $this->recv_procGroupChatReq();
  }

  public function send_procGroupChatReq($groupid, \TChatMsg $chatMsg, \TChatMsgExtra $extra)
  {
    $args = new \TChatSvr_procGroupChatReq_args();
    $args->groupid = $groupid;
    $args->chatMsg = $chatMsg;
    $args->extra = $extra;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'procGroupChatReq', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('procGroupChatReq', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_procGroupChatReq()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_procGroupChatReq_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_procGroupChatReq_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("procGroupChatReq failed: unknown result");
  }

  public function procUserJoinGroupNotify($userid, $groupid, $roletype)
  {
    $this->send_procUserJoinGroupNotify($userid, $groupid, $roletype);
    return $this->recv_procUserJoinGroupNotify();
  }

  public function send_procUserJoinGroupNotify($userid, $groupid, $roletype)
  {
    $args = new \TChatSvr_procUserJoinGroupNotify_args();
    $args->userid = $userid;
    $args->groupid = $groupid;
    $args->roletype = $roletype;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'procUserJoinGroupNotify', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('procUserJoinGroupNotify', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_procUserJoinGroupNotify()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_procUserJoinGroupNotify_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_procUserJoinGroupNotify_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("procUserJoinGroupNotify failed: unknown result");
  }

  public function proc_addGroupAssistMsg(\TGroupAssistMsg $assistMsg, $bNotyAdmin, $bNotyUser)
  {
    $this->send_proc_addGroupAssistMsg($assistMsg, $bNotyAdmin, $bNotyUser);
    return $this->recv_proc_addGroupAssistMsg();
  }

  public function send_proc_addGroupAssistMsg(\TGroupAssistMsg $assistMsg, $bNotyAdmin, $bNotyUser)
  {
    $args = new \TChatSvr_proc_addGroupAssistMsg_args();
    $args->assistMsg = $assistMsg;
    $args->bNotyAdmin = $bNotyAdmin;
    $args->bNotyUser = $bNotyUser;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_addGroupAssistMsg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_addGroupAssistMsg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_addGroupAssistMsg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_proc_addGroupAssistMsg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_proc_addGroupAssistMsg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_addGroupAssistMsg failed: unknown result");
  }

  public function handle_approveGroupAssistMsg($handle_userid, $groupid, $msgid, $agree, $apply_userid)
  {
    $this->send_handle_approveGroupAssistMsg($handle_userid, $groupid, $msgid, $agree, $apply_userid);
    return $this->recv_handle_approveGroupAssistMsg();
  }

  public function send_handle_approveGroupAssistMsg($handle_userid, $groupid, $msgid, $agree, $apply_userid)
  {
    $args = new \TChatSvr_handle_approveGroupAssistMsg_args();
    $args->handle_userid = $handle_userid;
    $args->groupid = $groupid;
    $args->msgid = $msgid;
    $args->agree = $agree;
    $args->apply_userid = $apply_userid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'handle_approveGroupAssistMsg', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('handle_approveGroupAssistMsg', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_handle_approveGroupAssistMsg()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_handle_approveGroupAssistMsg_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_handle_approveGroupAssistMsg_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("handle_approveGroupAssistMsg failed: unknown result");
  }

  public function handle_voice_callback($inputkey, $code, $key)
  {
    $this->send_handle_voice_callback($inputkey, $code, $key);
    return $this->recv_handle_voice_callback();
  }

  public function send_handle_voice_callback($inputkey, $code, $key)
  {
    $args = new \TChatSvr_handle_voice_callback_args();
    $args->inputkey = $inputkey;
    $args->code = $code;
    $args->key = $key;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'handle_voice_callback', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('handle_voice_callback', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_handle_voice_callback()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_handle_voice_callback_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_handle_voice_callback_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("handle_voice_callback failed: unknown result");
  }

  public function handle_keyword_action($action, $value, $replace)
  {
    $this->send_handle_keyword_action($action, $value, $replace);
    return $this->recv_handle_keyword_action();
  }

  public function send_handle_keyword_action($action, $value, $replace)
  {
    $args = new \TChatSvr_handle_keyword_action_args();
    $args->action = $action;
    $args->value = $value;
    $args->replace = $replace;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'handle_keyword_action', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('handle_keyword_action', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_handle_keyword_action()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_handle_keyword_action_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_handle_keyword_action_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("handle_keyword_action failed: unknown result");
  }

  public function proc_optPPTPic(array $vecPicId, $optType)
  {
    $this->send_proc_optPPTPic($vecPicId, $optType);
    return $this->recv_proc_optPPTPic();
  }

  public function send_proc_optPPTPic(array $vecPicId, $optType)
  {
    $args = new \TChatSvr_proc_optPPTPic_args();
    $args->vecPicId = $vecPicId;
    $args->optType = $optType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_optPPTPic', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_optPPTPic', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_optPPTPic()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_proc_optPPTPic_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_proc_optPPTPic_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_optPPTPic failed: unknown result");
  }

  public function proc_commentAudit(\TChatAuditMsg $tTChatMsg)
  {
    $this->send_proc_commentAudit($tTChatMsg);
    return $this->recv_proc_commentAudit();
  }

  public function send_proc_commentAudit(\TChatAuditMsg $tTChatMsg)
  {
    $args = new \TChatSvr_proc_commentAudit_args();
    $args->tTChatMsg = $tTChatMsg;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_commentAudit', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_commentAudit', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_commentAudit()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TChatSvr_proc_commentAudit_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TChatSvr_proc_commentAudit_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_commentAudit failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class TChatSvr_procGroupChatReq_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var \TChatMsg
   */
  public $chatMsg = null;
  /**
   * @var \TChatMsgExtra
   */
  public $extra = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'chatMsg',
          'type' => TType::STRUCT,
          'class' => '\TChatMsg',
          ),
        3 => array(
          'var' => 'extra',
          'type' => TType::STRUCT,
          'class' => '\TChatMsgExtra',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['chatMsg'])) {
        $this->chatMsg = $vals['chatMsg'];
      }
      if (isset($vals['extra'])) {
        $this->extra = $vals['extra'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_procGroupChatReq_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->chatMsg = new \TChatMsg();
            $xfer += $this->chatMsg->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->extra = new \TChatMsgExtra();
            $xfer += $this->extra->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_procGroupChatReq_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->chatMsg !== null) {
      if (!is_object($this->chatMsg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('chatMsg', TType::STRUCT, 2);
      $xfer += $this->chatMsg->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->extra !== null) {
      if (!is_object($this->extra)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('extra', TType::STRUCT, 3);
      $xfer += $this->extra->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_procGroupChatReq_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_procGroupChatReq_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_procGroupChatReq_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_procUserJoinGroupNotify_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var int
   */
  public $roletype = 10;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'roletype',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['roletype'])) {
        $this->roletype = $vals['roletype'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_procUserJoinGroupNotify_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->roletype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_procUserJoinGroupNotify_args');
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 1);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roletype !== null) {
      $xfer += $output->writeFieldBegin('roletype', TType::I32, 3);
      $xfer += $output->writeI32($this->roletype);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_procUserJoinGroupNotify_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_procUserJoinGroupNotify_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_procUserJoinGroupNotify_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_proc_addGroupAssistMsg_args {
  static $_TSPEC;

  /**
   * @var \TGroupAssistMsg
   */
  public $assistMsg = null;
  /**
   * @var bool
   */
  public $bNotyAdmin = true;
  /**
   * @var bool
   */
  public $bNotyUser = true;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'assistMsg',
          'type' => TType::STRUCT,
          'class' => '\TGroupAssistMsg',
          ),
        2 => array(
          'var' => 'bNotyAdmin',
          'type' => TType::BOOL,
          ),
        3 => array(
          'var' => 'bNotyUser',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['assistMsg'])) {
        $this->assistMsg = $vals['assistMsg'];
      }
      if (isset($vals['bNotyAdmin'])) {
        $this->bNotyAdmin = $vals['bNotyAdmin'];
      }
      if (isset($vals['bNotyUser'])) {
        $this->bNotyUser = $vals['bNotyUser'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_proc_addGroupAssistMsg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->assistMsg = new \TGroupAssistMsg();
            $xfer += $this->assistMsg->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bNotyAdmin);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->bNotyUser);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_proc_addGroupAssistMsg_args');
    if ($this->assistMsg !== null) {
      if (!is_object($this->assistMsg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('assistMsg', TType::STRUCT, 1);
      $xfer += $this->assistMsg->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bNotyAdmin !== null) {
      $xfer += $output->writeFieldBegin('bNotyAdmin', TType::BOOL, 2);
      $xfer += $output->writeBool($this->bNotyAdmin);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bNotyUser !== null) {
      $xfer += $output->writeFieldBegin('bNotyUser', TType::BOOL, 3);
      $xfer += $output->writeBool($this->bNotyUser);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_proc_addGroupAssistMsg_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_proc_addGroupAssistMsg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_proc_addGroupAssistMsg_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_handle_approveGroupAssistMsg_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $handle_userid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var int
   */
  public $msgid = null;
  /**
   * @var bool
   */
  public $agree = null;
  /**
   * @var int
   */
  public $apply_userid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'handle_userid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'msgid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'agree',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'apply_userid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['handle_userid'])) {
        $this->handle_userid = $vals['handle_userid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['msgid'])) {
        $this->msgid = $vals['msgid'];
      }
      if (isset($vals['agree'])) {
        $this->agree = $vals['agree'];
      }
      if (isset($vals['apply_userid'])) {
        $this->apply_userid = $vals['apply_userid'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_handle_approveGroupAssistMsg_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->handle_userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->msgid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->agree);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->apply_userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_handle_approveGroupAssistMsg_args');
    if ($this->handle_userid !== null) {
      $xfer += $output->writeFieldBegin('handle_userid', TType::I32, 1);
      $xfer += $output->writeI32($this->handle_userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->msgid !== null) {
      $xfer += $output->writeFieldBegin('msgid', TType::I32, 3);
      $xfer += $output->writeI32($this->msgid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->agree !== null) {
      $xfer += $output->writeFieldBegin('agree', TType::BOOL, 4);
      $xfer += $output->writeBool($this->agree);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->apply_userid !== null) {
      $xfer += $output->writeFieldBegin('apply_userid', TType::I32, 5);
      $xfer += $output->writeI32($this->apply_userid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_handle_approveGroupAssistMsg_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_handle_approveGroupAssistMsg_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_handle_approveGroupAssistMsg_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_handle_voice_callback_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $inputkey = null;
  /**
   * @var int
   */
  public $code = null;
  /**
   * @var string
   */
  public $key = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'inputkey',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'code',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['inputkey'])) {
        $this->inputkey = $vals['inputkey'];
      }
      if (isset($vals['code'])) {
        $this->code = $vals['code'];
      }
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_handle_voice_callback_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->inputkey);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->code);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_handle_voice_callback_args');
    if ($this->inputkey !== null) {
      $xfer += $output->writeFieldBegin('inputkey', TType::STRING, 1);
      $xfer += $output->writeString($this->inputkey);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->code !== null) {
      $xfer += $output->writeFieldBegin('code', TType::I32, 2);
      $xfer += $output->writeI32($this->code);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 3);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_handle_voice_callback_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_handle_voice_callback_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_handle_voice_callback_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_handle_keyword_action_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $action = null;
  /**
   * @var string
   */
  public $value = null;
  /**
   * @var string
   */
  public $replace = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'action',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'replace',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['action'])) {
        $this->action = $vals['action'];
      }
      if (isset($vals['value'])) {
        $this->value = $vals['value'];
      }
      if (isset($vals['replace'])) {
        $this->replace = $vals['replace'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_handle_keyword_action_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->action);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->value);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->replace);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_handle_keyword_action_args');
    if ($this->action !== null) {
      $xfer += $output->writeFieldBegin('action', TType::I32, 1);
      $xfer += $output->writeI32($this->action);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->value !== null) {
      $xfer += $output->writeFieldBegin('value', TType::STRING, 2);
      $xfer += $output->writeString($this->value);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->replace !== null) {
      $xfer += $output->writeFieldBegin('replace', TType::STRING, 3);
      $xfer += $output->writeString($this->replace);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_handle_keyword_action_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_handle_keyword_action_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_handle_keyword_action_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_proc_optPPTPic_args {
  static $_TSPEC;

  /**
   * @var \TPPTPicInfo[]
   */
  public $vecPicId = null;
  /**
   * @var int
   */
  public $optType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'vecPicId',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\TPPTPicInfo',
            ),
          ),
        2 => array(
          'var' => 'optType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['vecPicId'])) {
        $this->vecPicId = $vals['vecPicId'];
      }
      if (isset($vals['optType'])) {
        $this->optType = $vals['optType'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_proc_optPPTPic_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::LST) {
            $this->vecPicId = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \TPPTPicInfo();
              $xfer += $elem5->read($input);
              $this->vecPicId []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->optType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_proc_optPPTPic_args');
    if ($this->vecPicId !== null) {
      if (!is_array($this->vecPicId)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('vecPicId', TType::LST, 1);
      {
        $output->writeListBegin(TType::STRUCT, count($this->vecPicId));
        {
          foreach ($this->vecPicId as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->optType !== null) {
      $xfer += $output->writeFieldBegin('optType', TType::I32, 2);
      $xfer += $output->writeI32($this->optType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_proc_optPPTPic_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_proc_optPPTPic_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_proc_optPPTPic_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_proc_commentAudit_args {
  static $_TSPEC;

  /**
   * @var \TChatAuditMsg
   */
  public $tTChatMsg = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'tTChatMsg',
          'type' => TType::STRUCT,
          'class' => '\TChatAuditMsg',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['tTChatMsg'])) {
        $this->tTChatMsg = $vals['tTChatMsg'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_proc_commentAudit_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->tTChatMsg = new \TChatAuditMsg();
            $xfer += $this->tTChatMsg->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_proc_commentAudit_args');
    if ($this->tTChatMsg !== null) {
      if (!is_object($this->tTChatMsg)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('tTChatMsg', TType::STRUCT, 1);
      $xfer += $this->tTChatMsg->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TChatSvr_proc_commentAudit_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TChatSvr_proc_commentAudit_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TChatSvr_proc_commentAudit_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


