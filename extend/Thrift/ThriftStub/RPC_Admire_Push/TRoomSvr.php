<?php
// 不要加命名空间


require_once ROOT_PATH.'/extend/Thrift/ThriftStub/RPC_Admire_Push/Types.php';
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * The first thing to know about are types. The available types in Thrift are:
 * 
 *  bool        Boolean, one byte
 *  byte        Signed byte
 *  i16         Signed 16-bit integer
 *  i32         Signed 32-bit integer
 *  i64         Signed 64-bit integer
 *  double      64-bit floating point value
 *  string      String
 *  binary      Blob (byte array)
 *  map<t1,t2>  Map from one type to another
 *  list<t1>    Ordered list of one type
 *  set<t1>     Set of unique elements of one type
 * 
 * Did you also notice that Thrift supports C style comments?
 */
interface TRoomSvrIf {
  /**
   * @param \Thrift\ThriftStub\RPC_Group_Push\TJoinGroup $oReq
   * @return int
   */
  public function proc_joingroup(\Thrift\ThriftStub\RPC_Group_Push\TJoinGroup $oReq);
  /**
   * @param int $runid
   * @param int $userid
   * @param int $groupid
   * @param int $reasonid
   * @param int $kickout_min
   * @return int
   */
  public function proc_blockUserInGroup($runid, $userid, $groupid, $reasonid, $kickout_min);
  /**
   * @param int $groupid
   * @param int $ownerid
   * @return bool
   */
  public function proc_setGroupOwner($groupid, $ownerid);
  /**
   * @param int $groupid
   * @param string $host
   * @return bool
   */
  public function proc_loadGroup($groupid, $host);
  /**
   * @param int $groupid
   * @param string $host
   * @return bool
   */
  public function proc_modGroup($groupid, $host);
  /**
   * @param int $runid
   * @param int $groupid
   * @param array $mSetting
   * @return int
   */
  public function proc_modGroupSettings($runid, $groupid, array $mSetting);
  /**
   * @param int $runid
   * @param int $groupid
   * @param bool $Switch
   * @param bool $kickOnlooker
   * @return int
   */
  public function proc_modVisitSwitch($runid, $groupid, $Switch, $kickOnlooker);
  /**
   * @param int $runid
   * @param int $groupid
   * @param \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $maleCondition
   * @param \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $femaleCondition
   * @return int
   */
  public function proc_modJoinGroupMode($runid, $groupid, \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $maleCondition, \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $femaleCondition);
  /**
   * @param int $runid
   * @param int $groupid
   * @return int
   */
  public function proc_kickAllOnlookers($runid, $groupid);
  /**
   * @param int $runid
   * @param int $groupid
   * @param bool $Switch
   * @param bool $visitOnMic
   * @return int
   */
  public function proc_modVoiceChatSwitch($runid, $groupid, $Switch, $visitOnMic);
  /**
   * @param int $runid
   * @param int $groupid
   * @param bool $Switch
   * @return int
   */
  public function proc_modVideoAuthSwitch($runid, $groupid, $Switch);
  /**
   * @param int $runid
   * @param int $groupid
   * @param int $userid
   * @param int $roleType
   * @return int
   */
  public function proc_modGroupUserRole($runid, $groupid, $userid, $roleType);
  /**
   * @param int $groupid
   * @return \Thrift\ThriftStub\RPC_Group_Push\TUserGroupInfo[]
   */
  public function proc_getGroupVisitorLst($groupid);
  /**
   * @param int $userid
   * @param int $groupid
   * @return array
   */
  public function proc_queryInGroupList($userid, $groupid);
  /**
   * @param int $srcid
   * @param int $toid
   * @param int $groupid
   * @param string $gifname
   * @param int $tiptype
   * @param string $srcname
   * @param string $toname
   * @param string $gifpicture
   * @param int $gifcount
   * @return int
   */
  public function proc_give_tip($srcid, $toid, $groupid, $gifname, $tiptype, $srcname, $toname, $gifpicture, $gifcount);
  /**
   * @param int $groupid
   * @param string $title
   * @param string $source
   * @param string $summary
   * @param int $bTip
   * @param int $amount
   * @param int $pointId
   * @param string $head_add
   * @param int $recommendid
   * @param int $user_id
   * @return int
   */
  public function proc_send_link($groupid, $title, $source, $summary, $bTip, $amount, $pointId, $head_add, $recommendid, $user_id);
  /**
   * @param string $notice
   * @return int
   */
  public function proc_send_notice($notice);
  /**
   * @param int $groupid
   * @param string $title
   * @param string $source
   * @param string $summary
   * @param int $bTip
   * @param int $amount
   * @param int $courseId
   * @param string $head_add
   * @param string $teachername
   * @param string $srcimg
   * @param int $recommendid
   * @param int $user_id
   * @return int
   */
  public function proc_send_course($groupid, $title, $source, $summary, $bTip, $amount, $courseId, $head_add, $teachername, $srcimg, $recommendid, $user_id);
  /**
   * @param int $userid
   * @return int
   */
  public function proc_reloadUserInfo($userid);
  /**
   * @param int $liveid
   * @param int $numbers
   * @return int
   */
  public function proc_reloadRoomVirtualNumInfo($liveid, $numbers);
  /**
   * @param int $runuserid
   * @param int $liveid
   * @param int $status
   * @param int $type
   * @return int
   */
  public function proc_CloseLiveAndCourse($runuserid, $liveid, $status, $type);
  /**
   * @param string $streamId
   * @return int
   */
  public function proc_liveStart($streamId);
  /**
   * @param string $streamId
   * @return int
   */
  public function proc_liveStop($streamId);
  /**
   * @param int $courseId
   * @param int $subCourseId
   * @param int $userId
   * @param string $courseName
   * @param string $subCourseName
   * @param string $beginTime
   * @return int
   */
  public function proc_sendNewSubCourseNotice($courseId, $subCourseId, $userId, $courseName, $subCourseName, $beginTime);
  /**
   * @param int $courseId
   * @param bool $isSubCourse
   * @return int
   */
  public function proc_sendNewCourseNotice($courseId, $isSubCourse);
}

class TRoomSvrClient implements \TRoomSvrIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function proc_joingroup(\Thrift\ThriftStub\RPC_Group_Push\TJoinGroup $oReq)
  {
    $this->send_proc_joingroup($oReq);
    return $this->recv_proc_joingroup();
  }

  public function send_proc_joingroup(\Thrift\ThriftStub\RPC_Group_Push\TJoinGroup $oReq)
  {
    $args = new \TRoomSvr_proc_joingroup_args();
    $args->oReq = $oReq;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_joingroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_joingroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_joingroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_joingroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_joingroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_joingroup failed: unknown result");
  }

  public function proc_blockUserInGroup($runid, $userid, $groupid, $reasonid, $kickout_min)
  {
    $this->send_proc_blockUserInGroup($runid, $userid, $groupid, $reasonid, $kickout_min);
    return $this->recv_proc_blockUserInGroup();
  }

  public function send_proc_blockUserInGroup($runid, $userid, $groupid, $reasonid, $kickout_min)
  {
    $args = new \TRoomSvr_proc_blockUserInGroup_args();
    $args->runid = $runid;
    $args->userid = $userid;
    $args->groupid = $groupid;
    $args->reasonid = $reasonid;
    $args->kickout_min = $kickout_min;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_blockUserInGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_blockUserInGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_blockUserInGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_blockUserInGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_blockUserInGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_blockUserInGroup failed: unknown result");
  }

  public function proc_setGroupOwner($groupid, $ownerid)
  {
    $this->send_proc_setGroupOwner($groupid, $ownerid);
    return $this->recv_proc_setGroupOwner();
  }

  public function send_proc_setGroupOwner($groupid, $ownerid)
  {
    $args = new \TRoomSvr_proc_setGroupOwner_args();
    $args->groupid = $groupid;
    $args->ownerid = $ownerid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_setGroupOwner', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_setGroupOwner', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_setGroupOwner()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_setGroupOwner_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_setGroupOwner_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_setGroupOwner failed: unknown result");
  }

  public function proc_loadGroup($groupid, $host)
  {
    $this->send_proc_loadGroup($groupid, $host);
    return $this->recv_proc_loadGroup();
  }

  public function send_proc_loadGroup($groupid, $host)
  {
    $args = new \TRoomSvr_proc_loadGroup_args();
    $args->groupid = $groupid;
    $args->host = $host;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_loadGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_loadGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_loadGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_loadGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_loadGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_loadGroup failed: unknown result");
  }

  public function proc_modGroup($groupid, $host)
  {
    $this->send_proc_modGroup($groupid, $host);
    return $this->recv_proc_modGroup();
  }

  public function send_proc_modGroup($groupid, $host)
  {
    $args = new \TRoomSvr_proc_modGroup_args();
    $args->groupid = $groupid;
    $args->host = $host;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modGroup', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modGroup', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modGroup()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modGroup_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modGroup_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modGroup failed: unknown result");
  }

  public function proc_modGroupSettings($runid, $groupid, array $mSetting)
  {
    $this->send_proc_modGroupSettings($runid, $groupid, $mSetting);
    return $this->recv_proc_modGroupSettings();
  }

  public function send_proc_modGroupSettings($runid, $groupid, array $mSetting)
  {
    $args = new \TRoomSvr_proc_modGroupSettings_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $args->mSetting = $mSetting;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modGroupSettings', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modGroupSettings', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modGroupSettings()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modGroupSettings_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modGroupSettings_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modGroupSettings failed: unknown result");
  }

  public function proc_modVisitSwitch($runid, $groupid, $Switch, $kickOnlooker)
  {
    $this->send_proc_modVisitSwitch($runid, $groupid, $Switch, $kickOnlooker);
    return $this->recv_proc_modVisitSwitch();
  }

  public function send_proc_modVisitSwitch($runid, $groupid, $Switch, $kickOnlooker)
  {
    $args = new \TRoomSvr_proc_modVisitSwitch_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $args->Switch = $Switch;
    $args->kickOnlooker = $kickOnlooker;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modVisitSwitch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modVisitSwitch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modVisitSwitch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modVisitSwitch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modVisitSwitch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modVisitSwitch failed: unknown result");
  }

  public function proc_modJoinGroupMode($runid, $groupid, \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $maleCondition, \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $femaleCondition)
  {
    $this->send_proc_modJoinGroupMode($runid, $groupid, $maleCondition, $femaleCondition);
    return $this->recv_proc_modJoinGroupMode();
  }

  public function send_proc_modJoinGroupMode($runid, $groupid, \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $maleCondition, \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition $femaleCondition)
  {
    $args = new \TRoomSvr_proc_modJoinGroupMode_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $args->maleCondition = $maleCondition;
    $args->femaleCondition = $femaleCondition;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modJoinGroupMode', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modJoinGroupMode', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modJoinGroupMode()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modJoinGroupMode_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modJoinGroupMode_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modJoinGroupMode failed: unknown result");
  }

  public function proc_kickAllOnlookers($runid, $groupid)
  {
    $this->send_proc_kickAllOnlookers($runid, $groupid);
    return $this->recv_proc_kickAllOnlookers();
  }

  public function send_proc_kickAllOnlookers($runid, $groupid)
  {
    $args = new \TRoomSvr_proc_kickAllOnlookers_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_kickAllOnlookers', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_kickAllOnlookers', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_kickAllOnlookers()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_kickAllOnlookers_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_kickAllOnlookers_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_kickAllOnlookers failed: unknown result");
  }

  public function proc_modVoiceChatSwitch($runid, $groupid, $Switch, $visitOnMic)
  {
    $this->send_proc_modVoiceChatSwitch($runid, $groupid, $Switch, $visitOnMic);
    return $this->recv_proc_modVoiceChatSwitch();
  }

  public function send_proc_modVoiceChatSwitch($runid, $groupid, $Switch, $visitOnMic)
  {
    $args = new \TRoomSvr_proc_modVoiceChatSwitch_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $args->Switch = $Switch;
    $args->visitOnMic = $visitOnMic;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modVoiceChatSwitch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modVoiceChatSwitch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modVoiceChatSwitch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modVoiceChatSwitch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modVoiceChatSwitch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modVoiceChatSwitch failed: unknown result");
  }

  public function proc_modVideoAuthSwitch($runid, $groupid, $Switch)
  {
    $this->send_proc_modVideoAuthSwitch($runid, $groupid, $Switch);
    return $this->recv_proc_modVideoAuthSwitch();
  }

  public function send_proc_modVideoAuthSwitch($runid, $groupid, $Switch)
  {
    $args = new \TRoomSvr_proc_modVideoAuthSwitch_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $args->Switch = $Switch;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modVideoAuthSwitch', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modVideoAuthSwitch', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modVideoAuthSwitch()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modVideoAuthSwitch_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modVideoAuthSwitch_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modVideoAuthSwitch failed: unknown result");
  }

  public function proc_modGroupUserRole($runid, $groupid, $userid, $roleType)
  {
    $this->send_proc_modGroupUserRole($runid, $groupid, $userid, $roleType);
    return $this->recv_proc_modGroupUserRole();
  }

  public function send_proc_modGroupUserRole($runid, $groupid, $userid, $roleType)
  {
    $args = new \TRoomSvr_proc_modGroupUserRole_args();
    $args->runid = $runid;
    $args->groupid = $groupid;
    $args->userid = $userid;
    $args->roleType = $roleType;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_modGroupUserRole', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_modGroupUserRole', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_modGroupUserRole()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_modGroupUserRole_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_modGroupUserRole_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_modGroupUserRole failed: unknown result");
  }

  public function proc_getGroupVisitorLst($groupid)
  {
    $this->send_proc_getGroupVisitorLst($groupid);
    return $this->recv_proc_getGroupVisitorLst();
  }

  public function send_proc_getGroupVisitorLst($groupid)
  {
    $args = new \TRoomSvr_proc_getGroupVisitorLst_args();
    $args->groupid = $groupid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_getGroupVisitorLst', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_getGroupVisitorLst', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_getGroupVisitorLst()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_getGroupVisitorLst_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_getGroupVisitorLst_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_getGroupVisitorLst failed: unknown result");
  }

  public function proc_queryInGroupList($userid, $groupid)
  {
    $this->send_proc_queryInGroupList($userid, $groupid);
    return $this->recv_proc_queryInGroupList();
  }

  public function send_proc_queryInGroupList($userid, $groupid)
  {
    $args = new \TRoomSvr_proc_queryInGroupList_args();
    $args->userid = $userid;
    $args->groupid = $groupid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_queryInGroupList', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_queryInGroupList', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_queryInGroupList()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_queryInGroupList_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_queryInGroupList_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_queryInGroupList failed: unknown result");
  }

  public function proc_give_tip($srcid, $toid, $groupid, $gifname, $tiptype, $srcname, $toname, $gifpicture, $gifcount)
  {
    $this->send_proc_give_tip($srcid, $toid, $groupid, $gifname, $tiptype, $srcname, $toname, $gifpicture, $gifcount);
    return $this->recv_proc_give_tip();
  }

  public function send_proc_give_tip($srcid, $toid, $groupid, $gifname, $tiptype, $srcname, $toname, $gifpicture, $gifcount)
  {
    $args = new \TRoomSvr_proc_give_tip_args();
    $args->srcid = $srcid;
    $args->toid = $toid;
    $args->groupid = $groupid;
    $args->gifname = $gifname;
    $args->tiptype = $tiptype;
    $args->srcname = $srcname;
    $args->toname = $toname;
    $args->gifpicture = $gifpicture;
    $args->gifcount = $gifcount;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_give_tip', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_give_tip', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_give_tip()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_give_tip_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_give_tip_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_give_tip failed: unknown result");
  }

  public function proc_send_link($groupid, $title, $source, $summary, $bTip, $amount, $pointId, $head_add, $recommendid, $user_id)
  {
    $this->send_proc_send_link($groupid, $title, $source, $summary, $bTip, $amount, $pointId, $head_add, $recommendid, $user_id);
    return $this->recv_proc_send_link();
  }

  public function send_proc_send_link($groupid, $title, $source, $summary, $bTip, $amount, $pointId, $head_add, $recommendid, $user_id)
  {
    $args = new \TRoomSvr_proc_send_link_args();
    $args->groupid = $groupid;
    $args->title = $title;
    $args->source = $source;
    $args->summary = $summary;
    $args->bTip = $bTip;
    $args->amount = $amount;
    $args->pointId = $pointId;
    $args->head_add = $head_add;
    $args->recommendid = $recommendid;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_send_link', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_send_link', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_send_link()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_send_link_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_send_link_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_send_link failed: unknown result");
  }

  public function proc_send_notice($notice)
  {
    $this->send_proc_send_notice($notice);
    return $this->recv_proc_send_notice();
  }

  public function send_proc_send_notice($notice)
  {
    $args = new \TRoomSvr_proc_send_notice_args();
    $args->notice = $notice;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_send_notice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_send_notice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_send_notice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_send_notice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_send_notice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_send_notice failed: unknown result");
  }

  public function proc_send_course($groupid, $title, $source, $summary, $bTip, $amount, $courseId, $head_add, $teachername, $srcimg, $recommendid, $user_id)
  {
    $this->send_proc_send_course($groupid, $title, $source, $summary, $bTip, $amount, $courseId, $head_add, $teachername, $srcimg, $recommendid, $user_id);
    return $this->recv_proc_send_course();
  }

  public function send_proc_send_course($groupid, $title, $source, $summary, $bTip, $amount, $courseId, $head_add, $teachername, $srcimg, $recommendid, $user_id)
  {
    $args = new \TRoomSvr_proc_send_course_args();
    $args->groupid = $groupid;
    $args->title = $title;
    $args->source = $source;
    $args->summary = $summary;
    $args->bTip = $bTip;
    $args->amount = $amount;
    $args->courseId = $courseId;
    $args->head_add = $head_add;
    $args->teachername = $teachername;
    $args->srcimg = $srcimg;
    $args->recommendid = $recommendid;
    $args->user_id = $user_id;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_send_course', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_send_course', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_send_course()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_send_course_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_send_course_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_send_course failed: unknown result");
  }

  public function proc_reloadUserInfo($userid)
  {
    $this->send_proc_reloadUserInfo($userid);
    return $this->recv_proc_reloadUserInfo();
  }

  public function send_proc_reloadUserInfo($userid)
  {
    $args = new \TRoomSvr_proc_reloadUserInfo_args();
    $args->userid = $userid;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_reloadUserInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_reloadUserInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_reloadUserInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_reloadUserInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_reloadUserInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_reloadUserInfo failed: unknown result");
  }

  public function proc_reloadRoomVirtualNumInfo($liveid, $numbers)
  {
    $this->send_proc_reloadRoomVirtualNumInfo($liveid, $numbers);
    return $this->recv_proc_reloadRoomVirtualNumInfo();
  }

  public function send_proc_reloadRoomVirtualNumInfo($liveid, $numbers)
  {
    $args = new \TRoomSvr_proc_reloadRoomVirtualNumInfo_args();
    $args->liveid = $liveid;
    $args->numbers = $numbers;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_reloadRoomVirtualNumInfo', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_reloadRoomVirtualNumInfo', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_reloadRoomVirtualNumInfo()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_reloadRoomVirtualNumInfo_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_reloadRoomVirtualNumInfo_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_reloadRoomVirtualNumInfo failed: unknown result");
  }

  public function proc_CloseLiveAndCourse($runuserid, $liveid, $status, $type)
  {
    $this->send_proc_CloseLiveAndCourse($runuserid, $liveid, $status, $type);
    return $this->recv_proc_CloseLiveAndCourse();
  }

  public function send_proc_CloseLiveAndCourse($runuserid, $liveid, $status, $type)
  {
    $args = new \TRoomSvr_proc_CloseLiveAndCourse_args();
    $args->runuserid = $runuserid;
    $args->liveid = $liveid;
    $args->status = $status;
    $args->type = $type;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_CloseLiveAndCourse', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_CloseLiveAndCourse', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_CloseLiveAndCourse()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_CloseLiveAndCourse_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_CloseLiveAndCourse_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_CloseLiveAndCourse failed: unknown result");
  }

  public function proc_liveStart($streamId)
  {
    $this->send_proc_liveStart($streamId);
    return $this->recv_proc_liveStart();
  }

  public function send_proc_liveStart($streamId)
  {
    $args = new \TRoomSvr_proc_liveStart_args();
    $args->streamId = $streamId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_liveStart', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_liveStart', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_liveStart()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_liveStart_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_liveStart_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_liveStart failed: unknown result");
  }

  public function proc_liveStop($streamId)
  {
    $this->send_proc_liveStop($streamId);
    return $this->recv_proc_liveStop();
  }

  public function send_proc_liveStop($streamId)
  {
    $args = new \TRoomSvr_proc_liveStop_args();
    $args->streamId = $streamId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_liveStop', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_liveStop', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_liveStop()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_liveStop_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_liveStop_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_liveStop failed: unknown result");
  }

  public function proc_sendNewSubCourseNotice($courseId, $subCourseId, $userId, $courseName, $subCourseName, $beginTime)
  {
    $this->send_proc_sendNewSubCourseNotice($courseId, $subCourseId, $userId, $courseName, $subCourseName, $beginTime);
    return $this->recv_proc_sendNewSubCourseNotice();
  }

  public function send_proc_sendNewSubCourseNotice($courseId, $subCourseId, $userId, $courseName, $subCourseName, $beginTime)
  {
    $args = new \TRoomSvr_proc_sendNewSubCourseNotice_args();
    $args->courseId = $courseId;
    $args->subCourseId = $subCourseId;
    $args->userId = $userId;
    $args->courseName = $courseName;
    $args->subCourseName = $subCourseName;
    $args->beginTime = $beginTime;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_sendNewSubCourseNotice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_sendNewSubCourseNotice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_sendNewSubCourseNotice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_sendNewSubCourseNotice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_sendNewSubCourseNotice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_sendNewSubCourseNotice failed: unknown result");
  }

  public function proc_sendNewCourseNotice($courseId, $isSubCourse)
  {
    $this->send_proc_sendNewCourseNotice($courseId, $isSubCourse);
    return $this->recv_proc_sendNewCourseNotice();
  }

  public function send_proc_sendNewCourseNotice($courseId, $isSubCourse)
  {
    $args = new \TRoomSvr_proc_sendNewCourseNotice_args();
    $args->courseId = $courseId;
    $args->isSubCourse = $isSubCourse;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'proc_sendNewCourseNotice', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('proc_sendNewCourseNotice', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_proc_sendNewCourseNotice()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\TRoomSvr_proc_sendNewCourseNotice_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \TRoomSvr_proc_sendNewCourseNotice_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    throw new \Exception("proc_sendNewCourseNotice failed: unknown result");
  }

}

// HELPER FUNCTIONS AND STRUCTURES

class TRoomSvr_proc_joingroup_args {
  static $_TSPEC;

  /**
   * @var \Thrift\ThriftStub\RPC_Group_Push\TJoinGroup
   */
  public $oReq = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'oReq',
          'type' => TType::STRUCT,
          'class' => '\Thrift\ThriftStub\RPC_Group_Push\TJoinGroup',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['oReq'])) {
        $this->oReq = $vals['oReq'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_joingroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->oReq = new \Thrift\ThriftStub\RPC_Group_Push\TJoinGroup();
            $xfer += $this->oReq->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_joingroup_args');
    if ($this->oReq !== null) {
      if (!is_object($this->oReq)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('oReq', TType::STRUCT, 1);
      $xfer += $this->oReq->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_joingroup_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_joingroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_joingroup_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_blockUserInGroup_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $userid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var int
   */
  public $reasonid = null;
  /**
   * @var int
   */
  public $kickout_min = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'reasonid',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'kickout_min',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['reasonid'])) {
        $this->reasonid = $vals['reasonid'];
      }
      if (isset($vals['kickout_min'])) {
        $this->kickout_min = $vals['kickout_min'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_blockUserInGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->reasonid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->kickout_min);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_blockUserInGroup_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 2);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 3);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reasonid !== null) {
      $xfer += $output->writeFieldBegin('reasonid', TType::I32, 4);
      $xfer += $output->writeI32($this->reasonid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kickout_min !== null) {
      $xfer += $output->writeFieldBegin('kickout_min', TType::I32, 5);
      $xfer += $output->writeI32($this->kickout_min);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_blockUserInGroup_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_blockUserInGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_blockUserInGroup_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_setGroupOwner_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var int
   */
  public $ownerid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'ownerid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['ownerid'])) {
        $this->ownerid = $vals['ownerid'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_setGroupOwner_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->ownerid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_setGroupOwner_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->ownerid !== null) {
      $xfer += $output->writeFieldBegin('ownerid', TType::I32, 2);
      $xfer += $output->writeI32($this->ownerid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_setGroupOwner_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_setGroupOwner_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_setGroupOwner_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_loadGroup_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var string
   */
  public $host = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_loadGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_loadGroup_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_loadGroup_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_loadGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_loadGroup_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modGroup_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var string
   */
  public $host = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'host',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['host'])) {
        $this->host = $vals['host'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modGroup_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->host);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modGroup_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->host !== null) {
      $xfer += $output->writeFieldBegin('host', TType::STRING, 2);
      $xfer += $output->writeString($this->host);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modGroup_result {
  static $_TSPEC;

  /**
   * @var bool
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modGroup_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modGroup_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::BOOL, 0);
      $xfer += $output->writeBool($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modGroupSettings_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var array
   */
  public $mSetting = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'mSetting',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['mSetting'])) {
        $this->mSetting = $vals['mSetting'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modGroupSettings_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->mSetting = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = 0;
              $val6 = '';
              $xfer += $input->readI32($key5);
              $xfer += $input->readString($val6);
              $this->mSetting[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modGroupSettings_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->mSetting !== null) {
      if (!is_array($this->mSetting)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('mSetting', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::I32, TType::STRING, count($this->mSetting));
        {
          foreach ($this->mSetting as $kiter7 => $viter8)
          {
            $xfer += $output->writeI32($kiter7);
            $xfer += $output->writeString($viter8);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modGroupSettings_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modGroupSettings_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modGroupSettings_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modVisitSwitch_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var bool
   */
  public $Switch = null;
  /**
   * @var bool
   */
  public $kickOnlooker = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'Switch',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'kickOnlooker',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['Switch'])) {
        $this->Switch = $vals['Switch'];
      }
      if (isset($vals['kickOnlooker'])) {
        $this->kickOnlooker = $vals['kickOnlooker'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modVisitSwitch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->Switch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->kickOnlooker);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modVisitSwitch_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Switch !== null) {
      $xfer += $output->writeFieldBegin('Switch', TType::BOOL, 3);
      $xfer += $output->writeBool($this->Switch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->kickOnlooker !== null) {
      $xfer += $output->writeFieldBegin('kickOnlooker', TType::BOOL, 4);
      $xfer += $output->writeBool($this->kickOnlooker);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modVisitSwitch_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modVisitSwitch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modVisitSwitch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modJoinGroupMode_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition
   */
  public $maleCondition = null;
  /**
   * @var \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition
   */
  public $femaleCondition = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'maleCondition',
          'type' => TType::STRUCT,
          'class' => '\Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition',
          ),
        4 => array(
          'var' => 'femaleCondition',
          'type' => TType::STRUCT,
          'class' => '\Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['maleCondition'])) {
        $this->maleCondition = $vals['maleCondition'];
      }
      if (isset($vals['femaleCondition'])) {
        $this->femaleCondition = $vals['femaleCondition'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modJoinGroupMode_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRUCT) {
            $this->maleCondition = new \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition();
            $xfer += $this->maleCondition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRUCT) {
            $this->femaleCondition = new \Thrift\ThriftStub\RPC_Group_Push\TJoinGroupCondition();
            $xfer += $this->femaleCondition->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modJoinGroupMode_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maleCondition !== null) {
      if (!is_object($this->maleCondition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('maleCondition', TType::STRUCT, 3);
      $xfer += $this->maleCondition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->femaleCondition !== null) {
      if (!is_object($this->femaleCondition)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('femaleCondition', TType::STRUCT, 4);
      $xfer += $this->femaleCondition->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modJoinGroupMode_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modJoinGroupMode_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modJoinGroupMode_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_kickAllOnlookers_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_kickAllOnlookers_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_kickAllOnlookers_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_kickAllOnlookers_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_kickAllOnlookers_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_kickAllOnlookers_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modVoiceChatSwitch_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var bool
   */
  public $Switch = null;
  /**
   * @var bool
   */
  public $visitOnMic = false;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'Switch',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'visitOnMic',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['Switch'])) {
        $this->Switch = $vals['Switch'];
      }
      if (isset($vals['visitOnMic'])) {
        $this->visitOnMic = $vals['visitOnMic'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modVoiceChatSwitch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->Switch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->visitOnMic);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modVoiceChatSwitch_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Switch !== null) {
      $xfer += $output->writeFieldBegin('Switch', TType::BOOL, 3);
      $xfer += $output->writeBool($this->Switch);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->visitOnMic !== null) {
      $xfer += $output->writeFieldBegin('visitOnMic', TType::BOOL, 4);
      $xfer += $output->writeBool($this->visitOnMic);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modVoiceChatSwitch_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modVoiceChatSwitch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modVoiceChatSwitch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modVideoAuthSwitch_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var bool
   */
  public $Switch = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'Switch',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['Switch'])) {
        $this->Switch = $vals['Switch'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modVideoAuthSwitch_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->Switch);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modVideoAuthSwitch_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->Switch !== null) {
      $xfer += $output->writeFieldBegin('Switch', TType::BOOL, 3);
      $xfer += $output->writeBool($this->Switch);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modVideoAuthSwitch_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modVideoAuthSwitch_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modVideoAuthSwitch_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modGroupUserRole_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var int
   */
  public $userid = null;
  /**
   * @var int
   */
  public $roleType = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'roleType',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runid'])) {
        $this->runid = $vals['runid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['roleType'])) {
        $this->roleType = $vals['roleType'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modGroupUserRole_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->roleType);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modGroupUserRole_args');
    if ($this->runid !== null) {
      $xfer += $output->writeFieldBegin('runid', TType::I32, 1);
      $xfer += $output->writeI32($this->runid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 3);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->roleType !== null) {
      $xfer += $output->writeFieldBegin('roleType', TType::I32, 4);
      $xfer += $output->writeI32($this->roleType);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_modGroupUserRole_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_modGroupUserRole_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_modGroupUserRole_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_getGroupVisitorLst_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_getGroupVisitorLst_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_getGroupVisitorLst_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_getGroupVisitorLst_result {
  static $_TSPEC;

  /**
   * @var \Thrift\ThriftStub\RPC_Group_Push\TUserGroupInfo[]
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Thrift\ThriftStub\RPC_Group_Push\TUserGroupInfo',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_getGroupVisitorLst_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::LST) {
            $this->success = array();
            $_size9 = 0;
            $_etype12 = 0;
            $xfer += $input->readListBegin($_etype12, $_size9);
            for ($_i13 = 0; $_i13 < $_size9; ++$_i13)
            {
              $elem14 = null;
              $elem14 = new \Thrift\ThriftStub\RPC_Group_Push\TUserGroupInfo();
              $xfer += $elem14->read($input);
              $this->success []= $elem14;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_getGroupVisitorLst_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::LST, 0);
      {
        $output->writeListBegin(TType::STRUCT, count($this->success));
        {
          foreach ($this->success as $iter15)
          {
            $xfer += $iter15->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_queryInGroupList_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userid = null;
  /**
   * @var int
   */
  public $groupid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_queryInGroupList_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_queryInGroupList_args');
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 1);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 2);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_queryInGroupList_result {
  static $_TSPEC;

  /**
   * @var array
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::MAP,
          'ktype' => TType::I32,
          'vtype' => TType::LST,
          'key' => array(
            'type' => TType::I32,
          ),
          'val' => array(
            'type' => TType::LST,
            'etype' => TType::I32,
            'elem' => array(
              'type' => TType::I32,
              ),
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_queryInGroupList_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::MAP) {
            $this->success = array();
            $_size16 = 0;
            $_ktype17 = 0;
            $_vtype18 = 0;
            $xfer += $input->readMapBegin($_ktype17, $_vtype18, $_size16);
            for ($_i20 = 0; $_i20 < $_size16; ++$_i20)
            {
              $key21 = 0;
              $val22 = array();
              $xfer += $input->readI32($key21);
              $val22 = array();
              $_size23 = 0;
              $_etype26 = 0;
              $xfer += $input->readListBegin($_etype26, $_size23);
              for ($_i27 = 0; $_i27 < $_size23; ++$_i27)
              {
                $elem28 = null;
                $xfer += $input->readI32($elem28);
                $val22 []= $elem28;
              }
              $xfer += $input->readListEnd();
              $this->success[$key21] = $val22;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_queryInGroupList_result');
    if ($this->success !== null) {
      if (!is_array($this->success)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('success', TType::MAP, 0);
      {
        $output->writeMapBegin(TType::I32, TType::LST, count($this->success));
        {
          foreach ($this->success as $kiter29 => $viter30)
          {
            $xfer += $output->writeI32($kiter29);
            {
              $output->writeListBegin(TType::I32, count($viter30));
              {
                foreach ($viter30 as $iter31)
                {
                  $xfer += $output->writeI32($iter31);
                }
              }
              $output->writeListEnd();
            }
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_give_tip_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $srcid = null;
  /**
   * @var int
   */
  public $toid = null;
  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var string
   */
  public $gifname = null;
  /**
   * @var int
   */
  public $tiptype = null;
  /**
   * @var string
   */
  public $srcname = null;
  /**
   * @var string
   */
  public $toname = null;
  /**
   * @var string
   */
  public $gifpicture = null;
  /**
   * @var int
   */
  public $gifcount = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'srcid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'toid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'gifname',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'tiptype',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'srcname',
          'type' => TType::STRING,
          ),
        7 => array(
          'var' => 'toname',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'gifpicture',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'gifcount',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['srcid'])) {
        $this->srcid = $vals['srcid'];
      }
      if (isset($vals['toid'])) {
        $this->toid = $vals['toid'];
      }
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['gifname'])) {
        $this->gifname = $vals['gifname'];
      }
      if (isset($vals['tiptype'])) {
        $this->tiptype = $vals['tiptype'];
      }
      if (isset($vals['srcname'])) {
        $this->srcname = $vals['srcname'];
      }
      if (isset($vals['toname'])) {
        $this->toname = $vals['toname'];
      }
      if (isset($vals['gifpicture'])) {
        $this->gifpicture = $vals['gifpicture'];
      }
      if (isset($vals['gifcount'])) {
        $this->gifcount = $vals['gifcount'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_give_tip_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->srcid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->toid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gifname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->tiptype);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->srcname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->toname);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->gifpicture);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->gifcount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_give_tip_args');
    if ($this->srcid !== null) {
      $xfer += $output->writeFieldBegin('srcid', TType::I32, 1);
      $xfer += $output->writeI32($this->srcid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toid !== null) {
      $xfer += $output->writeFieldBegin('toid', TType::I32, 2);
      $xfer += $output->writeI32($this->toid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 3);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gifname !== null) {
      $xfer += $output->writeFieldBegin('gifname', TType::STRING, 4);
      $xfer += $output->writeString($this->gifname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->tiptype !== null) {
      $xfer += $output->writeFieldBegin('tiptype', TType::I32, 5);
      $xfer += $output->writeI32($this->tiptype);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcname !== null) {
      $xfer += $output->writeFieldBegin('srcname', TType::STRING, 6);
      $xfer += $output->writeString($this->srcname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->toname !== null) {
      $xfer += $output->writeFieldBegin('toname', TType::STRING, 7);
      $xfer += $output->writeString($this->toname);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gifpicture !== null) {
      $xfer += $output->writeFieldBegin('gifpicture', TType::STRING, 8);
      $xfer += $output->writeString($this->gifpicture);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->gifcount !== null) {
      $xfer += $output->writeFieldBegin('gifcount', TType::I32, 9);
      $xfer += $output->writeI32($this->gifcount);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_give_tip_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_give_tip_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_give_tip_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_send_link_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $source = null;
  /**
   * @var string
   */
  public $summary = null;
  /**
   * @var int
   */
  public $bTip = null;
  /**
   * @var int
   */
  public $amount = null;
  /**
   * @var int
   */
  public $pointId = null;
  /**
   * @var string
   */
  public $head_add = null;
  /**
   * @var int
   */
  public $recommendid = null;
  /**
   * @var int
   */
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'summary',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bTip',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'pointId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'head_add',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'recommendid',
          'type' => TType::I32,
          ),
        10 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['summary'])) {
        $this->summary = $vals['summary'];
      }
      if (isset($vals['bTip'])) {
        $this->bTip = $vals['bTip'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['pointId'])) {
        $this->pointId = $vals['pointId'];
      }
      if (isset($vals['head_add'])) {
        $this->head_add = $vals['head_add'];
      }
      if (isset($vals['recommendid'])) {
        $this->recommendid = $vals['recommendid'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_send_link_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->summary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bTip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->pointId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->head_add);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recommendid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_send_link_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 3);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->summary !== null) {
      $xfer += $output->writeFieldBegin('summary', TType::STRING, 4);
      $xfer += $output->writeString($this->summary);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bTip !== null) {
      $xfer += $output->writeFieldBegin('bTip', TType::I32, 5);
      $xfer += $output->writeI32($this->bTip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 6);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->pointId !== null) {
      $xfer += $output->writeFieldBegin('pointId', TType::I32, 7);
      $xfer += $output->writeI32($this->pointId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->head_add !== null) {
      $xfer += $output->writeFieldBegin('head_add', TType::STRING, 8);
      $xfer += $output->writeString($this->head_add);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendid !== null) {
      $xfer += $output->writeFieldBegin('recommendid', TType::I32, 9);
      $xfer += $output->writeI32($this->recommendid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 10);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_send_link_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_send_link_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_send_link_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_send_notice_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $notice = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'notice',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['notice'])) {
        $this->notice = $vals['notice'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_send_notice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->notice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_send_notice_args');
    if ($this->notice !== null) {
      $xfer += $output->writeFieldBegin('notice', TType::STRING, 1);
      $xfer += $output->writeString($this->notice);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_send_notice_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_send_notice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_send_notice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_send_course_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $groupid = null;
  /**
   * @var string
   */
  public $title = null;
  /**
   * @var string
   */
  public $source = null;
  /**
   * @var string
   */
  public $summary = null;
  /**
   * @var int
   */
  public $bTip = null;
  /**
   * @var int
   */
  public $amount = null;
  /**
   * @var int
   */
  public $courseId = null;
  /**
   * @var string
   */
  public $head_add = null;
  /**
   * @var string
   */
  public $teachername = null;
  /**
   * @var string
   */
  public $srcimg = null;
  /**
   * @var int
   */
  public $recommendid = null;
  /**
   * @var int
   */
  public $user_id = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'groupid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'source',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'summary',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'bTip',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'amount',
          'type' => TType::I32,
          ),
        7 => array(
          'var' => 'courseId',
          'type' => TType::I32,
          ),
        8 => array(
          'var' => 'head_add',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'teachername',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'srcimg',
          'type' => TType::STRING,
          ),
        11 => array(
          'var' => 'recommendid',
          'type' => TType::I32,
          ),
        12 => array(
          'var' => 'user_id',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['groupid'])) {
        $this->groupid = $vals['groupid'];
      }
      if (isset($vals['title'])) {
        $this->title = $vals['title'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['summary'])) {
        $this->summary = $vals['summary'];
      }
      if (isset($vals['bTip'])) {
        $this->bTip = $vals['bTip'];
      }
      if (isset($vals['amount'])) {
        $this->amount = $vals['amount'];
      }
      if (isset($vals['courseId'])) {
        $this->courseId = $vals['courseId'];
      }
      if (isset($vals['head_add'])) {
        $this->head_add = $vals['head_add'];
      }
      if (isset($vals['teachername'])) {
        $this->teachername = $vals['teachername'];
      }
      if (isset($vals['srcimg'])) {
        $this->srcimg = $vals['srcimg'];
      }
      if (isset($vals['recommendid'])) {
        $this->recommendid = $vals['recommendid'];
      }
      if (isset($vals['user_id'])) {
        $this->user_id = $vals['user_id'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_send_course_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->groupid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->source);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->summary);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->bTip);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->amount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->courseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->head_add);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->teachername);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->srcimg);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->recommendid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 12:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->user_id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_send_course_args');
    if ($this->groupid !== null) {
      $xfer += $output->writeFieldBegin('groupid', TType::I32, 1);
      $xfer += $output->writeI32($this->groupid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->title !== null) {
      $xfer += $output->writeFieldBegin('title', TType::STRING, 2);
      $xfer += $output->writeString($this->title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      $xfer += $output->writeFieldBegin('source', TType::STRING, 3);
      $xfer += $output->writeString($this->source);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->summary !== null) {
      $xfer += $output->writeFieldBegin('summary', TType::STRING, 4);
      $xfer += $output->writeString($this->summary);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->bTip !== null) {
      $xfer += $output->writeFieldBegin('bTip', TType::I32, 5);
      $xfer += $output->writeI32($this->bTip);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->amount !== null) {
      $xfer += $output->writeFieldBegin('amount', TType::I32, 6);
      $xfer += $output->writeI32($this->amount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->courseId !== null) {
      $xfer += $output->writeFieldBegin('courseId', TType::I32, 7);
      $xfer += $output->writeI32($this->courseId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->head_add !== null) {
      $xfer += $output->writeFieldBegin('head_add', TType::STRING, 8);
      $xfer += $output->writeString($this->head_add);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->teachername !== null) {
      $xfer += $output->writeFieldBegin('teachername', TType::STRING, 9);
      $xfer += $output->writeString($this->teachername);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->srcimg !== null) {
      $xfer += $output->writeFieldBegin('srcimg', TType::STRING, 10);
      $xfer += $output->writeString($this->srcimg);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->recommendid !== null) {
      $xfer += $output->writeFieldBegin('recommendid', TType::I32, 11);
      $xfer += $output->writeI32($this->recommendid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->user_id !== null) {
      $xfer += $output->writeFieldBegin('user_id', TType::I32, 12);
      $xfer += $output->writeI32($this->user_id);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_send_course_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_send_course_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_send_course_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_reloadUserInfo_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $userid = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'userid',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['userid'])) {
        $this->userid = $vals['userid'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_reloadUserInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_reloadUserInfo_args');
    if ($this->userid !== null) {
      $xfer += $output->writeFieldBegin('userid', TType::I32, 1);
      $xfer += $output->writeI32($this->userid);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_reloadUserInfo_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_reloadUserInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_reloadUserInfo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_reloadRoomVirtualNumInfo_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $liveid = null;
  /**
   * @var int
   */
  public $numbers = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'liveid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'numbers',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['liveid'])) {
        $this->liveid = $vals['liveid'];
      }
      if (isset($vals['numbers'])) {
        $this->numbers = $vals['numbers'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_reloadRoomVirtualNumInfo_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->liveid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->numbers);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_reloadRoomVirtualNumInfo_args');
    if ($this->liveid !== null) {
      $xfer += $output->writeFieldBegin('liveid', TType::I32, 1);
      $xfer += $output->writeI32($this->liveid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->numbers !== null) {
      $xfer += $output->writeFieldBegin('numbers', TType::I32, 2);
      $xfer += $output->writeI32($this->numbers);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_reloadRoomVirtualNumInfo_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_reloadRoomVirtualNumInfo_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_reloadRoomVirtualNumInfo_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_CloseLiveAndCourse_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $runuserid = null;
  /**
   * @var int
   */
  public $liveid = null;
  /**
   * @var int
   */
  public $status = null;
  /**
   * @var int
   */
  public $type = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'runuserid',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'liveid',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'status',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'type',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['runuserid'])) {
        $this->runuserid = $vals['runuserid'];
      }
      if (isset($vals['liveid'])) {
        $this->liveid = $vals['liveid'];
      }
      if (isset($vals['status'])) {
        $this->status = $vals['status'];
      }
      if (isset($vals['type'])) {
        $this->type = $vals['type'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_CloseLiveAndCourse_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->runuserid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->liveid);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->status);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->type);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_CloseLiveAndCourse_args');
    if ($this->runuserid !== null) {
      $xfer += $output->writeFieldBegin('runuserid', TType::I32, 1);
      $xfer += $output->writeI32($this->runuserid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->liveid !== null) {
      $xfer += $output->writeFieldBegin('liveid', TType::I32, 2);
      $xfer += $output->writeI32($this->liveid);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->status !== null) {
      $xfer += $output->writeFieldBegin('status', TType::I32, 3);
      $xfer += $output->writeI32($this->status);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->type !== null) {
      $xfer += $output->writeFieldBegin('type', TType::I32, 4);
      $xfer += $output->writeI32($this->type);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_CloseLiveAndCourse_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_CloseLiveAndCourse_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_CloseLiveAndCourse_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_liveStart_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $streamId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'streamId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['streamId'])) {
        $this->streamId = $vals['streamId'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_liveStart_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_liveStart_args');
    if ($this->streamId !== null) {
      $xfer += $output->writeFieldBegin('streamId', TType::STRING, 1);
      $xfer += $output->writeString($this->streamId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_liveStart_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_liveStart_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_liveStart_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_liveStop_args {
  static $_TSPEC;

  /**
   * @var string
   */
  public $streamId = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'streamId',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['streamId'])) {
        $this->streamId = $vals['streamId'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_liveStop_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->streamId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_liveStop_args');
    if ($this->streamId !== null) {
      $xfer += $output->writeFieldBegin('streamId', TType::STRING, 1);
      $xfer += $output->writeString($this->streamId);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_liveStop_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_liveStop_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_liveStop_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_sendNewSubCourseNotice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $courseId = null;
  /**
   * @var int
   */
  public $subCourseId = null;
  /**
   * @var int
   */
  public $userId = null;
  /**
   * @var string
   */
  public $courseName = null;
  /**
   * @var string
   */
  public $subCourseName = null;
  /**
   * @var string
   */
  public $beginTime = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'courseId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'subCourseId',
          'type' => TType::I32,
          ),
        3 => array(
          'var' => 'userId',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'courseName',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'subCourseName',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'beginTime',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['courseId'])) {
        $this->courseId = $vals['courseId'];
      }
      if (isset($vals['subCourseId'])) {
        $this->subCourseId = $vals['subCourseId'];
      }
      if (isset($vals['userId'])) {
        $this->userId = $vals['userId'];
      }
      if (isset($vals['courseName'])) {
        $this->courseName = $vals['courseName'];
      }
      if (isset($vals['subCourseName'])) {
        $this->subCourseName = $vals['subCourseName'];
      }
      if (isset($vals['beginTime'])) {
        $this->beginTime = $vals['beginTime'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_sendNewSubCourseNotice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->courseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->subCourseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->userId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->courseName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->subCourseName);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->beginTime);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_sendNewSubCourseNotice_args');
    if ($this->courseId !== null) {
      $xfer += $output->writeFieldBegin('courseId', TType::I32, 1);
      $xfer += $output->writeI32($this->courseId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subCourseId !== null) {
      $xfer += $output->writeFieldBegin('subCourseId', TType::I32, 2);
      $xfer += $output->writeI32($this->subCourseId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->userId !== null) {
      $xfer += $output->writeFieldBegin('userId', TType::I32, 3);
      $xfer += $output->writeI32($this->userId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->courseName !== null) {
      $xfer += $output->writeFieldBegin('courseName', TType::STRING, 4);
      $xfer += $output->writeString($this->courseName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->subCourseName !== null) {
      $xfer += $output->writeFieldBegin('subCourseName', TType::STRING, 5);
      $xfer += $output->writeString($this->subCourseName);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->beginTime !== null) {
      $xfer += $output->writeFieldBegin('beginTime', TType::STRING, 6);
      $xfer += $output->writeString($this->beginTime);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_sendNewSubCourseNotice_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_sendNewSubCourseNotice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_sendNewSubCourseNotice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_sendNewCourseNotice_args {
  static $_TSPEC;

  /**
   * @var int
   */
  public $courseId = null;
  /**
   * @var bool
   */
  public $isSubCourse = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'courseId',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'isSubCourse',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['courseId'])) {
        $this->courseId = $vals['courseId'];
      }
      if (isset($vals['isSubCourse'])) {
        $this->isSubCourse = $vals['isSubCourse'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_sendNewCourseNotice_args';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->courseId);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isSubCourse);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_sendNewCourseNotice_args');
    if ($this->courseId !== null) {
      $xfer += $output->writeFieldBegin('courseId', TType::I32, 1);
      $xfer += $output->writeI32($this->courseId);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isSubCourse !== null) {
      $xfer += $output->writeFieldBegin('isSubCourse', TType::BOOL, 2);
      $xfer += $output->writeBool($this->isSubCourse);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class TRoomSvr_proc_sendNewCourseNotice_result {
  static $_TSPEC;

  /**
   * @var int
   */
  public $success = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        0 => array(
          'var' => 'success',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['success'])) {
        $this->success = $vals['success'];
      }
    }
  }

  public function getName() {
    return 'TRoomSvr_proc_sendNewCourseNotice_result';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 0:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->success);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('TRoomSvr_proc_sendNewCourseNotice_result');
    if ($this->success !== null) {
      $xfer += $output->writeFieldBegin('success', TType::I32, 0);
      $xfer += $output->writeI32($this->success);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


